import { StackFrame } from "stacktrace-js";
import { LogFn, Taggable, Stoppable, Startable, ScoutTag, JSONValue } from "../types";
import { Scout } from "./index";
export interface ChildSpannable {
    /**
     * Create a child span inside the request
     * @abstract
     */
    startChildSpan(operation: string): Promise<ScoutSpan>;
    startChildSpanSync(operation: string): ScoutSpan;
    /**
     * Get all active child spans
     */
    getChildSpans(): Promise<ScoutSpan[]>;
    getChildSpansSync(): ScoutSpan[];
}
export interface ScoutSpanOptions {
    id?: string;
    scoutInstance?: Scout;
    logFn?: LogFn;
    timestamp?: Date;
    started?: boolean;
    operation: string;
    requestId: string;
    parentId?: string;
    onStop?: () => Promise<void>;
    ignored?: boolean;
}
export default class ScoutSpan implements ChildSpannable, Taggable, Stoppable, Startable {
    readonly requestId: string;
    readonly parentId?: string;
    readonly id: string;
    readonly operation: string;
    private timestamp;
    private readonly scoutInstance?;
    private started;
    private stopped;
    private sending;
    private sent;
    private endTime;
    private childSpans;
    private tags;
    private traceFrames;
    private onStop;
    private ignored;
    constructor(opts: ScoutSpanOptions);
    pushTraceFrames(frames: StackFrame[]): void;
    prependTraceFrames(frames: StackFrame[]): void;
    getTimestamp(): Date;
    getDurationMs(): number;
    /** @see Taggable */
    addContext(name: string, value: JSONValue | JSONValue[]): Promise<this>;
    /** @see Taggable */
    addContextSync(name: string, value: JSONValue | JSONValue[]): this;
    /** @see Taggable */
    addContexts(tags: ScoutTag[]): Promise<this>;
    /** @see Taggable */
    addContextsSync(tags: ScoutTag[]): this;
    /** @see Taggable */
    getContextValue(name: string): JSONValue | JSONValue[] | undefined;
    getTags(): ScoutTag[];
    isIgnored(): boolean;
    ignore(): this;
    /** @see ChildSpannable */
    startChildSpan(operation: string): Promise<ScoutSpan>;
    /** @see ChildSpannable */
    startChildSpanSync(operation: string): ScoutSpan;
    /** @see ChildSpannable */
    getChildSpans(): Promise<ScoutSpan[]>;
    /** @see ChildSpannable */
    getChildSpansSync(): ScoutSpan[];
    finish(): Promise<this>;
    finishAndSend(): Promise<this>;
    isStopped(): boolean;
    getEndTime(): Date;
    setOnStop(fn: () => Promise<void>): void;
    stop(): Promise<this>;
    stopSync(): this;
    isStarted(): boolean;
    start(): Promise<this>;
    startSync(): this;
    /**
     * Send this span and internal spans to the scoutInstance
     *
     * @returns this span
     */
    send(scoutInstance?: Scout): Promise<this>;
    /**
     * Convert StackTraces as generated by stacktrace-js into Scout's expected format
     *
     * @param {StackFrame[]} frames - stack frames from stacktrace-js
     * @returns {ScoutStackTrace[]} the scout format for stack frames
     */
    private processStackFrames;
    private logFn;
}
