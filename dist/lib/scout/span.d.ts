import { LogFn, Taggable, Stoppable, Startable, ScoutTag, JSONValue } from "../types";
import ScoutRequest from "./request";
import { Scout } from "./index";
export interface ChildSpannable {
    /**
     * Create a child span inside the request
     * @abstract
     */
    startChildSpan(operation: string): Promise<ScoutSpan>;
    startChildSpanSync(operation: string): ScoutSpan;
    /**
     * Get all active child spans
     */
    getChildSpans(): Promise<ScoutSpan[]>;
    getChildSpansSync(): ScoutSpan[];
}
export interface ScoutSpanOptions {
    id?: string;
    scoutInstance?: Scout;
    logFn?: LogFn;
    parent?: ScoutSpan;
    timestamp?: Date;
    started?: boolean;
    operation: string;
    request: ScoutRequest;
}
export default class ScoutSpan implements ChildSpannable, Taggable, Stoppable, Startable {
    readonly request: ScoutRequest;
    readonly parent?: ScoutSpan;
    readonly id: string;
    readonly operation: string;
    private timestamp;
    private readonly scoutInstance?;
    private started;
    private stopped;
    private sending;
    private sent;
    private childSpans;
    private tags;
    constructor(opts: ScoutSpanOptions);
    getTimestamp(): Date;
    getDurationMs(): number;
    /** @see Taggable */
    addContext(tags: ScoutTag[]): Promise<this>;
    /** @see Taggable */
    addContextSync(tags: ScoutTag[]): this;
    /** @see Taggable */
    getContextValue(name: string): JSONValue | JSONValue[] | undefined;
    /** @see ChildSpannable */
    startChildSpan(operation: string): Promise<ScoutSpan>;
    /** @see ChildSpannable */
    startChildSpanSync(operation: string): ScoutSpan;
    /** @see ChildSpannable */
    getChildSpans(): Promise<ScoutSpan[]>;
    /** @see ChildSpannable */
    getChildSpansSync(): ScoutSpan[];
    finish(): Promise<this>;
    finishAndSend(): Promise<this>;
    isStopped(): boolean;
    stop(): Promise<this>;
    stopSync(): this;
    isStarted(): boolean;
    start(): Promise<this>;
    startSync(): this;
    /**
     * Send this span and internal spans to the scoutInstance
     *
     * @returns this span
     */
    send(scoutInstance?: Scout): Promise<this>;
    /**
     * Convert StackTraces as generated by stacktrace-js into Scout's expected format
     *
     * @param {StackFrame[]} frames - stack frames from stacktrace-js
     * @returns {ScoutStackTrace[]} the scout format for stack frames
     */
    private processStackFrames;
    private logFn;
}
